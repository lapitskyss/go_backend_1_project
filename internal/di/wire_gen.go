// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package di

import (
	"github.com/google/wire"
	"github.com/lapitskyss/go_backend_1_project/internal/repository"
	"github.com/lapitskyss/go_backend_1_project/internal/repository/file"
	"github.com/lapitskyss/go_backend_1_project/internal/server"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeAPIService() (*ApiService, func(), error) {
	sugaredLogger, cleanup, err := InitLogger()
	if err != nil {
		return nil, nil, err
	}
	repository, cleanup2, err := InitFileStore()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	api, cleanup3, err := InitServer(sugaredLogger, repository)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	apiService, err := InitApiService(sugaredLogger, api)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return apiService, func() {
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type ApiService struct {
	Log *zap.SugaredLogger
}

var APISet = wire.NewSet(
	InitApiService,
	InitLogger,
	InitServer,
	InitFileStore,
)

func InitApiService(log *zap.SugaredLogger, api *server.Api) (*ApiService, error) {
	return &ApiService{
		Log: log,
	}, nil
}

func InitLogger() (*zap.SugaredLogger, func(), error) {
	logger, _ := zap.NewProduction()

	cleanup := func() {
		logger.Sync()
	}

	sugar := logger.Sugar()

	return sugar, cleanup, nil
}

func InitServer(log *zap.SugaredLogger, rep repository.Repository) (*server.Api, func(), error) {
	server2 := server.New(log, rep)

	cleanup := func() {
		server2.
			Stop()
	}
	server2.
		Start()

	return server2, cleanup, nil
}

func InitFileStore() (repository.Repository, func(), error) {
	fileStore := file.New()

	cleanup := func() {

	}

	return fileStore, cleanup, nil
}
