// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/repository/repository (interfaces: LinkInterface)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/model"
	repository "github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/repository/repository"
)

// MockLinkInterface is a mock of LinkInterface interface.
type MockLinkInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLinkInterfaceMockRecorder
}

// MockLinkInterfaceMockRecorder is the mock recorder for MockLinkInterface.
type MockLinkInterfaceMockRecorder struct {
	mock *MockLinkInterface
}

// NewMockLinkInterface creates a new mock instance.
func NewMockLinkInterface(ctrl *gomock.Controller) *MockLinkInterface {
	mock := &MockLinkInterface{ctrl: ctrl}
	mock.recorder = &MockLinkInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkInterface) EXPECT() *MockLinkInterfaceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLinkInterface) Add(arg0 *model.Link) (*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0)
	ret0, _ := ret[0].(*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockLinkInterfaceMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLinkInterface)(nil).Add), arg0)
}

// CountByQuery mocks base method.
func (m *MockLinkInterface) CountByQuery(arg0 *string) (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByQuery", arg0)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByQuery indicates an expected call of CountByQuery.
func (mr *MockLinkInterfaceMockRecorder) CountByQuery(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByQuery", reflect.TypeOf((*MockLinkInterface)(nil).CountByQuery), arg0)
}

// FindBy mocks base method.
func (m *MockLinkInterface) FindBy(arg0 *repository.FindByParameters) ([]*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0)
	ret0, _ := ret[0].([]*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockLinkInterfaceMockRecorder) FindBy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockLinkInterface)(nil).FindBy), arg0)
}

// GetByHash mocks base method.
func (m *MockLinkInterface) GetByHash(arg0 string) (*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", arg0)
	ret0, _ := ret[0].(*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockLinkInterfaceMockRecorder) GetByHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockLinkInterface)(nil).GetByHash), arg0)
}

// GetByHashes mocks base method.
func (m *MockLinkInterface) GetByHashes(arg0 *[]string) ([]*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHashes", arg0)
	ret0, _ := ret[0].([]*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHashes indicates an expected call of GetByHashes.
func (mr *MockLinkInterfaceMockRecorder) GetByHashes(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHashes", reflect.TypeOf((*MockLinkInterface)(nil).GetByHashes), arg0)
}

// GetByURL mocks base method.
func (m *MockLinkInterface) GetByURL(arg0 string) (*model.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", arg0)
	ret0, _ := ret[0].(*model.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockLinkInterfaceMockRecorder) GetByURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockLinkInterface)(nil).GetByURL), arg0)
}

// GetNextId mocks base method.
func (m *MockLinkInterface) GetNextId() (*uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextId")
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextId indicates an expected call of GetNextId.
func (mr *MockLinkInterfaceMockRecorder) GetNextId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextId", reflect.TypeOf((*MockLinkInterface)(nil).GetNextId))
}
