// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/services/linksrv (interfaces: LinkStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linksrv "github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/services/linksrv"
)

// MockLinkStore is a mock of LinkStore interface.
type MockLinkStore struct {
	ctrl     *gomock.Controller
	recorder *MockLinkStoreMockRecorder
}

// MockLinkStoreMockRecorder is the mock recorder for MockLinkStore.
type MockLinkStoreMockRecorder struct {
	mock *MockLinkStore
}

// NewMockLinkStore creates a new mock instance.
func NewMockLinkStore(ctrl *gomock.Controller) *MockLinkStore {
	mock := &MockLinkStore{ctrl: ctrl}
	mock.recorder = &MockLinkStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkStore) EXPECT() *MockLinkStoreMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockLinkStore) Add(arg0 context.Context, arg1 *linksrv.Link) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockLinkStoreMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockLinkStore)(nil).Add), arg0, arg1)
}

// CountByQuery mocks base method.
func (m *MockLinkStore) CountByQuery(arg0 context.Context, arg1 string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByQuery", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByQuery indicates an expected call of CountByQuery.
func (mr *MockLinkStoreMockRecorder) CountByQuery(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByQuery", reflect.TypeOf((*MockLinkStore)(nil).CountByQuery), arg0, arg1)
}

// FindBy mocks base method.
func (m *MockLinkStore) FindBy(arg0 context.Context, arg1 linksrv.FindByParameters) (<-chan linksrv.Link, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBy", arg0, arg1)
	ret0, _ := ret[0].(<-chan linksrv.Link)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// FindBy indicates an expected call of FindBy.
func (mr *MockLinkStoreMockRecorder) FindBy(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBy", reflect.TypeOf((*MockLinkStore)(nil).FindBy), arg0, arg1)
}

// GetByHash mocks base method.
func (m *MockLinkStore) GetByHash(arg0 context.Context, arg1 string) (*linksrv.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHash", arg0, arg1)
	ret0, _ := ret[0].(*linksrv.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHash indicates an expected call of GetByHash.
func (mr *MockLinkStoreMockRecorder) GetByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHash", reflect.TypeOf((*MockLinkStore)(nil).GetByHash), arg0, arg1)
}

// GetByHashWithStatistics mocks base method.
func (m *MockLinkStore) GetByHashWithStatistics(arg0 context.Context, arg1 string) (*linksrv.StatisticForLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHashWithStatistics", arg0, arg1)
	ret0, _ := ret[0].(*linksrv.StatisticForLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByHashWithStatistics indicates an expected call of GetByHashWithStatistics.
func (mr *MockLinkStoreMockRecorder) GetByHashWithStatistics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHashWithStatistics", reflect.TypeOf((*MockLinkStore)(nil).GetByHashWithStatistics), arg0, arg1)
}

// GetByHashes mocks base method.
func (m *MockLinkStore) GetByHashes(arg0 context.Context, arg1 []string) (<-chan linksrv.Link, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByHashes", arg0, arg1)
	ret0, _ := ret[0].(<-chan linksrv.Link)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// GetByHashes indicates an expected call of GetByHashes.
func (mr *MockLinkStoreMockRecorder) GetByHashes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByHashes", reflect.TypeOf((*MockLinkStore)(nil).GetByHashes), arg0, arg1)
}

// GetByURL mocks base method.
func (m *MockLinkStore) GetByURL(arg0 context.Context, arg1 string) (*linksrv.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByURL", arg0, arg1)
	ret0, _ := ret[0].(*linksrv.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByURL indicates an expected call of GetByURL.
func (mr *MockLinkStoreMockRecorder) GetByURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByURL", reflect.TypeOf((*MockLinkStore)(nil).GetByURL), arg0, arg1)
}

// GetNextId mocks base method.
func (m *MockLinkStore) GetNextId(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNextId", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNextId indicates an expected call of GetNextId.
func (mr *MockLinkStoreMockRecorder) GetNextId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNextId", reflect.TypeOf((*MockLinkStore)(nil).GetNextId), arg0)
}
