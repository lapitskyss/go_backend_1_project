// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/caarlos0/env/v6"
	"github.com/google/wire"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/config"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/server/grpcs"
	handler2 "github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/server/grpcs/handler"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/server/rests"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/server/rests/handler"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/services/linksrv"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/services/redirectsrv"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/store/pg"
	"go.uber.org/zap"
	"strconv"
)

// Injectors from wire.go:

func InitializeREST() (*REST, func(), error) {
	logger, cleanup, err := InitLogger()
	if err != nil {
		return nil, nil, err
	}
	context, cleanup2, err := InitContext()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	config, err := InitConfig()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	store, cleanup3, err := InitPgStore(context, config, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	restServer, cleanup4, err := InitRESTServer(logger, store, config)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	rest, err := InitRESTService(logger, restServer)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return rest, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InitializeGRPC() (*GRPC, func(), error) {
	logger, cleanup, err := InitLogger()
	if err != nil {
		return nil, nil, err
	}
	context, cleanup2, err := InitContext()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	config, err := InitConfig()
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	store, cleanup3, err := InitPgStore(context, config, logger)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	grpcServer, cleanup4, err := InitGRPCServer(logger, store, config)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	grpc, err := InitGRPCService(logger, grpcServer)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return grpc, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type REST struct {
	Log        *zap.Logger
	RESTServer *rests.RESTServer
}

type GRPC struct {
	Log        *zap.Logger
	GRPCServer *grpcs.GRPCServer
}

var RestSet = wire.NewSet(
	InitRESTService,
	InitContext,
	InitConfig,
	InitLogger,
	InitPgStore,
	InitRESTServer,
)

var GRPCSet = wire.NewSet(
	InitGRPCService,
	InitContext,
	InitConfig,
	InitLogger,
	InitPgStore,
	InitGRPCServer,
)

func InitRESTService(log *zap.Logger, restServer *rests.RESTServer) (*REST, error) {
	return &REST{
		Log:        log,
		RESTServer: restServer,
	}, nil
}

func InitGRPCService(log *zap.Logger, grpcServer *grpcs.GRPCServer) (*GRPC, error) {
	return &GRPC{
		Log:        log,
		GRPCServer: grpcServer,
	}, nil
}

func InitContext() (context.Context, func(), error) {
	ctx := context.Background()

	cb := func() {
		ctx.Done()
	}

	return ctx, cb, nil
}

func InitConfig() (*config.Config, error) {
	cfg := &config.Config{}
	if err := env.Parse(cfg); err != nil {
		return nil, err
	}

	return cfg, nil
}

func InitLogger() (*zap.Logger, func(), error) {
	logger, _ := zap.NewProduction()

	cleanup := func() {
		_ = logger.Sync()
	}

	return logger, cleanup, nil
}

func InitPgStore(ctx context.Context, cfg *config.Config, log *zap.Logger) (*pg.Store, func(), error) {
	store, err := pg.Connect(ctx, cfg.DatabaseURL, log)
	if err != nil {
		return nil, nil, err
	}

	cleanup := func() {
		store.Close()
	}

	return store, cleanup, nil
}

func InitRESTServer(log *zap.Logger, store *pg.Store, cfg *config.Config) (*rests.RESTServer, func(), error) {
	linkStore := pg.NewLinkStore(store)
	linkService := linksrv.NewLinkService(log, linkStore)
	linkHandler := handler.NewLinkHandler(log, linkService)

	srv := rests.NewRESTServer(strconv.Itoa(cfg.RESTPort), log, linkHandler)

	cleanup := func() {
		_ = srv.Stop()
	}

	srv.Start()

	return srv, cleanup, nil
}

func InitGRPCServer(log *zap.Logger, store *pg.Store, cfg *config.Config) (*grpcs.GRPCServer, func(), error) {
	redirectStore := pg.NewRedirectStore(store)
	redirectService := redirectsrv.NewRedirectService(log, redirectStore)
	redirectHandler := handler2.NewRedirectHandler(log, redirectService)

	srv := grpcs.NewGRPCServer(log, redirectHandler)

	cleanup := func() {
		srv.Stop()
	}

	srv.Start(strconv.Itoa(cfg.GRPCPort))

	return srv, cleanup, nil
}
