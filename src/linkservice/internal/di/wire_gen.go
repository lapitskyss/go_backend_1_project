// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"context"
	"github.com/google/wire"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/repository/postgres"
	"github.com/lapitskyss/go_backend_1_project/src/linkservice/internal/server"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeLinkService() (*LinkService, func(), error) {
	sugaredLogger, cleanup, err := InitLogger()
	if err != nil {
		return nil, nil, err
	}
	context, cleanup2, err := InitContext()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	store, cleanup3, err := InitPostgresqlStore(context)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	httpServer, cleanup4, err := InitHttpServer(context, sugaredLogger, store)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	grpsServer, cleanup5, err := InitGRPCServer(context, sugaredLogger, store)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	linkService, err := InitLinkService(sugaredLogger, httpServer, grpsServer)
	if err != nil {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	return linkService, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type LinkService struct {
	Log        *zap.SugaredLogger
	HTTPServer *server.HTTPServer
	GRPSServer *server.GRPSServer
}

var LinkServiceSet = wire.NewSet(
	InitLinkService,
	InitContext,
	InitLogger,
	InitHttpServer,
	InitGRPCServer,
	InitPostgresqlStore,
)

func InitLinkService(log *zap.SugaredLogger, hs *server.HTTPServer, gs *server.GRPSServer) (*LinkService, error) {
	return &LinkService{
		Log:        log,
		HTTPServer: hs,
		GRPSServer: gs,
	}, nil
}

func InitContext() (context.Context, func(), error) {
	ctx := context.Background()

	cb := func() {
		ctx.Done()
	}

	return ctx, cb, nil
}

func InitLogger() (*zap.SugaredLogger, func(), error) {
	logger, _ := zap.NewProduction()

	cleanup := func() {
		logger.Sync()
	}

	sugar := logger.Sugar()

	return sugar, cleanup, nil
}

func InitHttpServer(ctx context.Context, log *zap.SugaredLogger, rep *postgres.Store) (*server.HTTPServer, func(), error) {
	server2 := server.NewHTTPServer(ctx, log, rep)

	cleanup := func() {
		server2.
			Stop()
	}
	server2.
		Start()

	return server2, cleanup, nil
}

func InitGRPCServer(ctx context.Context, log *zap.SugaredLogger, rep *postgres.Store) (*server.GRPSServer, func(), error) {
	server2 := server.NewGRPCServer(ctx, log, rep)

	cleanup := func() {
		server2.
			StopServer()
	}
	server2.
		StartServer()

	return server2, cleanup, nil
}

func InitPostgresqlStore(ctx context.Context) (*postgres.Store, func(), error) {
	var store postgres.Store

	err := store.Connect(ctx)
	if err != nil {
		return nil, nil, err
	}

	cleanup := func() {
		store.CloseConnection()
	}

	return &store, cleanup, nil
}
